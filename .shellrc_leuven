# Hey Emacs, this is a -*- sh -*- file
## .shellrc --- Shell agnostic configuration file

# Copyright (C) 2009-2025 Fabrice Niessen

# Author: Fabrice Niessen <(concat "fniessen" at-sign "pirilampo.org")>
# Keywords: bash, zsh, dotfile, config

# Print the kernel name, the hostname, the kernel release and the machine
# hardware name.
uname -s -n -r -m

# Define a shell function to log an error message, print an error message to
# stderr, and exit with a non-zero status code.
function die() {
    local message="${1:-Unknown error}"
    logger "$message"
    printf >&2 '%s: Fatal error: %s\n' "$(basename "$0")" "$message"
    exit 2
}

command_exists() {
    if ! command -v "$1" > /dev/null 2>&1; then
        printf >&2 "Error: '%s' command not found.\n" "$1"
        return 2
    fi
}

# Add a directory to PATH if it exists.
add_to_path() {
  if [[ -d "$1" ]]; then
    PATH="$1:$PATH"
  fi
}

# Add directories to PATH.
add_to_path "$HOME/bin"
add_to_path "$HOME/expect"
add_to_path "$HOME/R"

# Add $HOME/winbin to the end of PATH if it exists.
if [[ -d "$HOME/winbin" ]]; then
  PATH="$PATH:$HOME/winbin"
fi

# Add the current directory to PATH if not running as root.
[ "$UID" -ne 0 ] && PATH="$PATH:."

# Check if the ~/.dotfiles directory exists and set CDPATH accordingly.
if [ -d "$HOME/.dotfiles" ]; then
  CDPATH=".:$HOME:$HOME/.dotfiles"
else
  CDPATH=".:$HOME"
fi
export CDPATH

# If user's private man directory exists, add it to MANPATH.
if [[ -d "$HOME/man" ]]; then
    export MANPATH="$HOME/man:$MANPATH"
fi

# Add directories to INFOPATH.
export INFOPATH="/usr/share/info:$INFOPATH"

# Set umask based on the user's EUID.
umask 022                               # Prevent new dirs and files from being
                                        # group and world writable.

if [[ "$UID" -eq 0 ]]; then
    umask 077                           # Stricter.
fi

# # For Bash on Ubuntu on Windows.
# export BROWSER='/mnt/c/Windows/explorer.exe' # does not work.
# export BROWSER='/mnt/c/Program Files (x86)/Mozilla Firefox/firefox.exe'

export LANG=C.UTF-8

# # For scripts in R language.
# export LC_CTYPE=

# For Unicode ruler in diff-so-fancy.  See issue #364.
unset LC_CTYPE

export PAGER="less"

alias more='less'

export LESS_TERMCAP_mb=$'\e[01;31m'     # Begin bold.
export LESS_TERMCAP_md=$'\e[01;36m'     # Begin blink (section titles in cyan).
export LESS_TERMCAP_me=$'\e[0m'         # Reset bold/blink.
export LESS_TERMCAP_so=$'\e[01;44;33m'  # Begin reverse video.
export LESS_TERMCAP_se=$'\e[0m'         # Reset reverse video.
export LESS_TERMCAP_us=$'\e[01;32m'     # Begin underline.
export LESS_TERMCAP_ue=$'\e[0m'         # Reset underline.

export LESS='-R'

# Format for displaying non-printable, non-control characters (see `man less').
export LESSBINFMT="*n<%02X>"            # Do not use reverse video.
export LESSBINFMT="*d?"                 # Use bold ?.

export LESS='-F -i -M -R -X'
# export LESS="-P ?c<- .?f%f:Standard input.  ?n:?eEND:?p%pj\%.. .?c%ccol . ?mFile %i of %m  .?xNext\ %x.%t   Press h for help"
export LESS='--quit-if-one-screen --ignore-case --status-column --LONG-PROMPT --RAW-CONTROL-CHARS --HILITE-UNREAD --tabs=4 --no-init --window=-4'

alias hgrep='history | grep -i'

# Display information about the current shell process.
alias which-shell='ps -p $$'

# Set time style (ISO 8601 format) for `ls` command.
export TIME_STYLE=long-iso

# Determine if the terminal supports colors.
if [[ "$TERM" != "dumb" ]]; then
    # Add `--show-control-chars` option.
    LS_OPTIONS="${LS_OPTIONS} --show-control-chars"

    # Create `ls` and `ll` aliases with color options and other formatting
    # options.
    alias ls='ls --color=auto -F'       # Use colors and append file type
                                        # indicators to file names.
    alias ll='ls --color=auto -a --group-directories-first -G -h -l'
                                        # Use colors, list all files, group
                                        # directories first, and use
                                        # human-readable sizes.

    # Generate shell code for directory colors.
    if [[ -f "$HOME"/.dircolors ]]; then
        eval "$(dircolors -b $HOME/.dircolors)"
        # See https://github.com/seebi/dircolors-solarized.
    else
        eval "$(dircolors -b)"
    fi
else
    alias ls='ls -CF'                   # Use basic listing format without
                                        # colors, append file type indicators to
                                        # file names.
fi

# Print a directory tree using ASCII characters.
alias dirtree='find . -type d | sed -e "s/[^-][^\/]*\//  |/g" -e "s/|\([^ ]\)/|-\1/"'

alias df='df -kTh'

alias du='du -h'
alias du1='du -h --max-depth=1'

alias dusort='du -ms * | sort -rn'

alias du-summary='du --max-depth=1 -k | sort -nr | cut -f2 | xargs -d '\n' du -sh'

alias mount='mount | column -t'

# Play safe!  Prevent some accidental mistakes.
alias rm='rm -i'                        # Confirm removing file.
alias cp='cp -i'                        # Confirm copy over an existing file.
alias mv='mv -i'                        # Confirm move over an existing file.

# Make an extract function!
alias tgz='tar -zxvf'
alias tbz2='tar -jxvf'

# Display the contents of $PATH with each directory separated by a newline character.
alias path='echo "$PATH" | tr ":" "\n"'

# Display information about a command, function, or shell built-in.
alias where='type -a'

# Enable aliases to be sudoâ€™ed.
alias sudo='sudo '

# Become root.
alias root='sudo -i'

# Upgrade everything.
alias upgrade-system='sudo apt update -y \
    && sudo apt full-upgrade -y \
    && sudo apt autoremove -y \
    && sudo apt clean -y \
    && sudo apt autoclean -y'

alias poweroff="systemctl poweroff"
alias reboot="systemctl reboot"

# Make executable.
alias exe='chmod +x'

# Recursively change the owner of all files and directories to the current user.
alias own='sudo chown -R $USER'

alias c='clear'
alias j='jobs -l'
alias l='ls'                            # xx
alias m='man'
# alias p='$PAGER'
alias q='exit'
alias s='sudo'
alias t='tail -f'
# alias x='exit' # Conflict with extract (from Oh-my-Zsh?)

# Make `diff' automatically call `colordiff' (Install `colordiff' package...).
command_exists colordiff && alias diff='colordiff'

alias ssh_list_keys='ssh-add -l'        # List all SSH identities.
alias ssh_add_key='ssh-add -t 4h'       # Add a new SSH identity and set a timeout of 4 hours.
alias ssh_remove_keys='ssh-add -D'      # Remove all SSH identities from the agent.

# Define function to add color to grep output.
function grep {
    # Use the original grep command with the `--color=auto` option.
    command grep --color=auto "$@"
}

# Define function to add color to egrep output.
function egrep {
    # Use the original grep command with the `-E` and `--color=auto` options.
    command grep -E --color=auto "$@"
}

# Define function to add color to fgrep output.
function fgrep {
    # Use the original grep command with the `-F` and `--color=auto` options.
    command grep -F --color=auto "$@"
}

# Define variable for GREP_COLORS.
GREP_COLORS='sl=:cx=:mt=01;37;1;44:ms=01;37;1;44:mc=01;37;1;44:fn=35:ln=32:bn=32:se=36'

# Export GREP_COLORS variable.
export GREP_COLORS

# Add -f option to pgrep to show full command line.
alias pgrep='pgrep -fl'

# Define alias for ps with grep.
# Usage: ps? <process_name>
alias 'ps?'='ps ax | grep '

alias rg="rg --colors 'match:bg:yellow' --colors 'match:fg:black' --colors 'match:style:bold'"
alias srg="rg --colors 'match:bg:yellow' --colors 'match:fg:black' --colors 'match:style:bold' --sort-files"

# GraphicsMagick.
alias GIF='gm convert -verbose -interlace LINE'
alias thumb='gm convert -geometry 100x100 -interlace LINE -verbose'
alias region='sleep 3; gm import selection$(date "+%Y%m%d%H%M%S").jpg'
alias screenshot='sleep 5; gm import -window root screen$(date "+%Y%m%d%H%M%S").jpg'
alias window='sleep 3; gm import -frame window$(date "+%Y%m%d%H%M%S").jpg'

# Resize images using GraphicsMagick.
gmresize() {
    local scale="1024x768"

    for file in "$@"; do
        if [[ ! -f "$file" ]]; then
            echo "File '$file' not found. Skipping..."
            continue
        fi
        echo "Processing image '$file'..."
        gm convert -scale "$scale" "$file" "${file%.*}-$scale.${file##*.}"
        # Use parameter expansion to remove file extension from filename.
    done
}

# Batch convert PNG files to JPG format.
png2jpg() {
    find . -name "*.png" -print0 \
        | xargs -0 -I {} basename -s ".png" {} \
        | xargs -I {} -n 1 gm convert -quality 85% {}.png {}.jpg
}

export GS_OPTIONS='-sPAPERSIZE=a4'
alias pdfmerge='gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=./pdf-joined.pdf' # pdfjoin
alias booklet="psbook | psnup -2 | pstops '2:0,1U(21cm,29.7cm)'"
# for Win32, choose gswin32c

# cleanup_files [-r] - Remove useless files (recursively).
cleanup_files() {
    if [[ "$1" = "-r" ]]; then
        find . \(
            -name "#*" \
            -o -name "*~" \
            -o -name ".*~" \
            -o -name "*.~[0-9]*~" \
            -o -name ".*.~[0-9]*~" \
            -o -name "*.~BASE~" \
            -o -name ".*.~BASE~" \
        \) -ok rm "{}" ";"
    else
        rm -i \
            \#* \
            *~ \
            .*~ \
            *.~[0-9]*~ \
            .*.~[0-9]*~ \
            *.~BASE~ \
            .*.~BASE~
    fi
}

# Recursively set permissions for directories and files.
set-sane-perm() {
    # Set directories to 755.
    find . -type d -exec chmod 755 {} +
    # Set files to 644, or use custom permission mode if specified.
    local mode="${1:-644}"
    find . -type f -exec chmod "$mode" {} +
}

# # Search for various types or README file in dir and display them in $PAGER.
# readme() {
#     local files
#     files=(./(#i)*(read*me|lue*m(in|)ut)*(ND))
#     if (($#files)); then
#         $PAGER $files
#     else
#         print 'No README files.'
#     fi
# }

safetmp() {
    test -d "$HOME" || exit 1
    test -d "$HOME"/tmp || mkdir "$HOME"/tmp
    echo "$HOME/tmp/safetmp.$(hostname).$(date +%s).$$"
}

# Open immediately the first match.
texman() {
    locate "$*" | grep pdf | grep texlive | head -1 | xargs open
}

texlist() {
    locate "$*" | grep "\(pdf\|dvi\)" | grep "\ (texlive\|gwTeX\)"
}

# Commandline Fu
cmdfu() {
    curl "http://www.commandlinefu.com/commands/matching/$(echo "$@" \
        | sed 's/ /-/g')/$(echo -n $@ | base64)/plaintext" ;
}

# Check if websites are down
down4me() {
    curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g';
}
