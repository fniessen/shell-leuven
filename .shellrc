# Hey Emacs, this is a -*- sh -*- file
## .shellrc --- Shell agnostic configuration file

# Copyright (C) 2009-2022 Fabrice Niessen

# Author: Fabrice Niessen <(concat "fniessen" at-sign "pirilampo.org")>
# Keywords: bash, zsh, dotfile, config

uname -s -n -r -m

die() {
    msg="${1:-"Unknown error"}"
    logger "${msg}"
    printf '%s: Fatal error: %s\n' "$(basename $0)" "${msg}" > /dev/stderr
    exit 2                              # An error occurred.
}

has() {
    if ! command -v "$1" > /dev/null 2>&1; then
        echo "$1 not found."
        return 2                        # An error occurred.
    fi
}

# Cd to working directory of current Emacs buffer.
cde() {
  builtin cd $(emacsclient -e '(with-current-buffer
                                   (window-buffer (selected-window))
                                 default-directory)' | tr -d '"')
}

# Extend the PATH var (where to look for executable files).
for MAYBE_PATH in "$HOME"/bin \
                  "$HOME"/expect \
                  "$HOME"/R; do
    # `-e' or `-x'?
    if [[ -d "$MAYBE_PATH" ]]; then
        PATH="$MAYBE_PATH":"$PATH"
    fi
done

# Add the winbin directory (if it exists).
if [[ -d "$HOME"/winbin ]]; then
    PATH="$PATH":"$HOME"/winbin
fi

# Add the current directory as last component in the search path (not to include
# for `root', for security reasons).
if [[ $EUID -ne 0 ]]; then
    PATH="$PATH":.
fi

# Search current directory and home directory.
export CDPATH=.:"$HOME"

# set MANPATH so it includes user's private man if it exists
# do the same with MANPATH
# if [[ -d "$HOME"/man ]]; then
#     export MANPATH="$HOME/man":"$MANPATH"
# fi

# colon separated list of directories to search for manual pages
#ifnset MANPATH "/usr/man"
    # TODO don't define it like that: does not work under Ubuntu!
    # See `/etc/manpath.config'

# Info readers (standalone + Emacs Info mode)
INFOPATH=/usr/share/info:"$INFOPATH"
# include a trailing colon on `INFOPATH' to concatenate the Emacs
# `Info-default-directory-list' when searching for info files
# INFOPATH="$HOME"/texlive/2014/texmf/doc/info:"$INFOPATH"

# Permissions on newly created files.
umask 022                               # Prevent new dirs and files from being
                                        # group and world writable.
if [[ $EUID -eq 0 ]]; then
    umask 077                           # Stricter.
fi

# # For Bash on Ubuntu on Windows.
# export BROWSER='/mnt/c/Windows/explorer.exe' # does not work.
# export BROWSER='/mnt/c/Program Files (x86)/Mozilla Firefox/firefox.exe'

export LANG=C.UTF-8

# # For scripts in R language.
# export LC_CTYPE=

# For Unicode ruler in diff-so-fancy.  See issue #364.
unset LC_CTYPE

# Find a suitable editor.
if [ -z "$SSH_CONNECTION" ]; then
    export EDITOR="emacsclient"
    export ALTERNATE_EDITOR=""
    alias e="emacsclient -n" # 'e .' opens the current directory in Emacs.
    alias ee="emacsclient -n --alternate-editor=emacs"
    alias bgemacs='emacs &'
else
    EDITOR=$(command -v emacs \
                 || command -v subl \
                 || command -v atom \
                 || command -v nano)
    alias e='$EDITOR'
fi

# Use `$EDITOR' for programs wanting an editor.
export VISUAL="$EDITOR"

export PAGER="less"

alias more='less'

export LESS_TERMCAP_mb=$'\e[01;31m'     # Begin bold.
export LESS_TERMCAP_md=$'\e[01;36m'     # Begin blink (section titles in cyan).
export LESS_TERMCAP_me=$'\e[0m'         # Reset bold/blink.
export LESS_TERMCAP_so=$'\e[01;44;33m'  # Begin reverse video.
export LESS_TERMCAP_se=$'\e[0m'         # Reset reverse video.
export LESS_TERMCAP_us=$'\e[01;32m'     # Begin underline.
export LESS_TERMCAP_ue=$'\e[0m'         # Reset underline.

export LESS='-R'

# Format for displaying non-printable, non-control characters (see `man less').
export LESSBINFMT="*n<%02X>"            # Do not use reverse video.
export LESSBINFMT="*d?"                 # Use bold ?.

export LESS='-F -i -M -R -X'
# export LESS="-P ?c<- .?f%f:Standard input.  ?n:?eEND:?p%pj\%.. .?c%ccol . ?mFile %i of %m  .?xNext\ %x.%t   Press h for help"
export LESS='--quit-if-one-screen --ignore-case --status-column --LONG-PROMPT --RAW-CONTROL-CHARS --HILITE-UNREAD --tabs=4 --no-init --window=-4'

# Start x11 server (if a process instance is not already running).
# ps -ae | grep XWin || startxwin > /dev/null 2>&1 &   # XXX For Cygwin only!
# To check that have the package xinit installed, try 'startxwin' without redirecting anything.

# Set DISPLAY environment variable.
export DISPLAY=:0.0

alias hgrep='history | grep -i'

alias update-dotfiles="~/.dotfiles/bin/dot update"

alias which-shell='ps -p $$'

LS_OPTIONS="$LS_OPTIONS --show-control-chars"

# Make `ls' produce ISO 8601 format.
export TIME_STYLE=long-iso

# Colorize `ls' output.
if [[ "$TERM" != "dumb" ]]; then

    # Add my coloration scheme to directory listings.
    if [[ -f "$HOME"/.dircolors ]]; then
        eval "$(dircolors -b $HOME/.dircolors)"
        # See https://github.com/seebi/dircolors-solarized.
    else
        eval "$(dircolors -b)"
    fi

    alias ls='ls --color=auto -F'
    alias ll='ls --color=auto -a --group-directories-first -G -h -l'
                                        # Long listing and hidden files.
else
    alias ls='ls -CF'
fi

alias dirf='find . -type d | sed -e "s/[^-][^\/]*\//  |/g" -e "s/|\([^ ]\)/|-\1/"'

alias df='df -kTh'

alias du='du -kh'

alias du='du -h'
alias du1='du -h --max-depth=1'
alias dus='du -ms * | sort -rn'         # Ordered by size.

alias mount='mount | column -t'

alias sizes="du --max-depth=1 -k | sort -nr | cut -f2 | xargs -d '\n' du -sh"

# Play safe!  Prevent some accidental mistakes.
alias rm='rm -i'                        # Confirm removing file.
alias cp='cp -i'                        # Confirm copy over an existing file.
alias mv='mv -i'                        # Confirm move over an existing file.

# Make an extract function!
alias tgz='tar -zxvf'
alias tbz2='tar -jxvf'

# Print a more readable PATH (each directory on a new line).
alias path='echo "$PATH" | sed -e "s/:/\n/g"'
alias path='sed "s/:/\n/g" <<< "$PATH"' # here-strings (undefined in POSIX sh).
alias path='tr ":" "\n" <<< "$PATH"'    # here-strings.
alias path='echo -e "${PATH//:/\\n}"'   # Parameter expansion (string replacement undefined in POSIX sh/dash).
# https://ubuntuplace.info/questions/4532/comment-afficher-les-chemins-dans-path-separement

# Path.
alias where='type -a'                   # Good?

alias mkall='./configure && make && sudo make install'

# Enable aliases to be sudoâ€™ed.
alias sudo='sudo '

# Become root.
alias root='sudo -i'

# Upgrade everything.
alias upgrade-sys='sudo apt update -y \
    && sudo apt full-upgrade -y \
    && sudo apt autoremove -y \
    && sudo apt clean -y \
    && sudo apt autoclean -y'

alias poweroff="systemctl poweroff"
alias reboot="systemctl reboot"

# Make executable.
alias exe='chmod +x'
alias addx='chmod +x'

# Chown current dir and subdirs.
alias own='sudo chown -R $USER'

alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

alias -- -='cd -'                       # Alias '-' to 'cd -'.

# Print the current directory stack (list directory history).
alias d='dirs -v | head -n 10'

alias 1='cd -'
alias 2='cd +2'
alias 3='cd +3'
alias 4='cd +4'
alias 5='cd +5'
alias 6='cd +6'
alias 7='cd +7'
alias 8='cd +8'
alias 9='cd +9'

# # For WSL.
# alias c:='cd /mnt/c'
# alias d:='cd /mnt/d'

# For Cygwin.
if [[ "$OSTYPE" = cygwin* ]]; then
    alias c:='cd /cygdrive/c'
    alias d:='cd /cygdrive/d'
    alias open='cygstart'
    alias xdg-open='cygstart'
fi

alias c='clear'
alias j='jobs -l'
alias l='ls'                            # xx
alias m='man'
# alias p='$PAGER'
alias q='exit'
alias s='sudo'
alias t='tail -f'
# alias x='exit' # Conflict with extract (from Oh-my-Zsh?)

# Make `diff' automatically call `colordiff' (Install `colordiff' package...).
has colordiff && alias diff='colordiff'

alias g='git'

# alias gitroot='cd $(git rev-parse --show-toplevel)' # Conflict with Oh My Zsh?

# Good alias that will not blow up cd if you aren't in a Git directory.
alias cdroot='git rev-parse && cd "$(git rev-parse --show-toplevel)"'

alias tigs='tig status'                 # Use it all of the time!
alias tigb='tig blame'
alias tigall='tig --all'
alias tigreleases='tig --all --simplify-by-decoration'

alias keylist='ssh-add -l'              # List all identities.
alias keyon='ssh-add -t 4h'             # Add identity.
alias keyoff='ssh-add -D'               # Remove all identities.

org_test() {
    (
        cd "$HOME"/Public/Repositories/org-mode
        mkdir /tmp/tmp-orgtest 2> /dev/null # TMPDIR must exist!
        TMPDIR=/tmp/tmp-orgtest \
            emacs -Q --batch -L lisp/ -L testing/ -l org-test.el --eval '(setq org-confirm-babel-evaluate nil)' -f org-test-run-batch-tests
    )
}

# Display the matched pattern in color.
alias grep='grep --color=auto'
alias egrep='grep -E --color=auto'
alias fgrep='grep -F --color=auto'

# export GREP_COLOR='0;33;1;44'         # Bold Yellow on blue.
export GREP_COLORS="sl=:cx=:mt=01;33;1;44:ms=01;33;1;44:mc=01;33;1;44:fn=35:ln=32:bn=32:se=36"

# Grep through the running processes.
alias pgrep='pgrep -fl'
alias 'ps?'='ps ax | grep '

alias rg="rg --colors 'match:bg:yellow' --colors 'match:fg:black' --colors 'match:style:bold'"
alias srg="rg --colors 'match:bg:yellow' --colors 'match:fg:black' --colors 'match:style:bold' --sort-files"

# GraphicsMagick.
alias GIF='gm convert -verbose -interlace LINE'
alias thumb='gm convert -geometry 100x100 -interlace LINE -verbose'
alias region='sleep 3; gm import selection$(date "+%Y%m%d%H%M%S").jpg'
alias screenshot='sleep 5; gm import -window root screen$(date "+%Y%m%d%H%M%S").jpg'
alias window='sleep 3; gm import -frame window$(date "+%Y%m%d%H%M%S").jpg'

gmresize() {
    FILES="$@"
    SCALE="1024x768"
  # for i in *.(gif|jpeg|jpg|png);
    for i in $FILES; do
        echo "Processing image $i ..."
        gm convert -scale $SCALE "$i" $(basename "$i" .${i##*.})-$SCALE.${i##*.}
        # Obscure but useful string operations.
        # (See http://www.arachnoid.com/linux/shell_programming.html.)
    done
}

# find . -name "*png" | xargs -l -i basename -s ".png" "{}" | xargs -l -i  gm convert -quality 85% "{}.png" "{}.jpg"

export GS_OPTIONS='-sPAPERSIZE=a4'
alias pdfmerge='gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=./pdf-joined.pdf' # pdfjoin
alias booklet="psbook | psnup -2 | pstops '2:0,1U(21cm,29.7cm)'"
# for Win32, choose gswin32c

# clean [-r] - Remove useless files (recursively).
clean() {
    if [[ "$1" = "-r" ]]; then
        find . \( -name "#*" -o -name "*~" -o -name ".*~" \
             -o -name "*.~[0-9]*~"\ -o -name ".*.~[0-9]*~" \
             -o -name "*.~BASE~" -o -name ".*.~BASE~" \) \
             -ok rm "{}" ";"
    else
        rm -i \#* *~ .*~ *.~[0-9]*~ .*.~[0-9]*~ *.~BASE~ .*.~BASE~
    fi
}

saneperms() {
    find . -type d -print0 | xargs -0 chmod 755
    find . -type f -print0 | xargs -0 chmod "${1:=644}"
}

# # Search for various types or README file in dir and display them in $PAGER.
# readme() {
#     local files
#     files=(./(#i)*(read*me|lue*m(in|)ut)*(ND))
#     if (($#files)); then
#         $PAGER $files
#     else
#         print 'No README files.'
#     fi
# }

safetmp() {
    test -d "$HOME" || exit 1
    test -d "$HOME"/tmp || mkdir "$HOME"/tmp
    echo "$HOME/tmp/safetmp.$(hostname).$(date +%s).$$"
}

# Open immediately the first match.
texman() {
    locate "$*" | grep pdf | grep texlive | head -1 | xargs open
}

texlist() {
    locate "$*" | grep "\(pdf\|dvi\)" | grep "\ (texlive\|gwTeX\)"
}

# Commandline Fu
cmdfu() {
    curl "http://www.commandlinefu.com/commands/matching/$(echo "$@" \
        | sed 's/ /-/g')/$(echo -n $@ | base64)/plaintext" ;
}

# Check if websites are down
down4me() {
    curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g';
}

## Google Translate Functions ##

say() {
   find ~/Downloads/en -name "$1.ogg" -exec ogg123 {} \;
   # mplayer -user-agent Mozilla -prefer-ipv4 \
   # "http://translate.google.md/translate_tts?ie=UTF-8&tl="$1"&q=$(echo "$@" \
   # | cut -d ' ' -f2- | sed 's/ /\+/g')" > /dev/null 2>&1 ;
}

say-translation() {
   lang=$1
   trans=$(translate {=$lang} "$(echo "$@" | cut -d ' ' -f2- | sed 's/ /\+/g')" )
   echo $trans
   mplayer -user-agent Mozilla \
   "http://translate.google.com/translate_tts?ie=UTF-8&tl=$lang&q=$trans" > /dev/null 2>&1 ;
}

alert() {
    $@
    echo -e "\a"                        # Beep.
}
