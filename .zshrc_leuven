# Hey Emacs, this is a -*- sh -*- file
## .zshrc --- Zsh configuration file (for interactive shells)

# Copyright (C) 2009-2025 Fabrice Niessen

# Author: Fabrice Niessen <(concat "fniessen" at-sign "pirilampo.org")>
# Keywords: zsh, dotfile, config

# Code:

# Color stderr.
zmodload zsh/system
color_stderr_red() {
    # Sysread & syswrite are part of `zsh/system'.
    emulate -LR zsh
    local stderr_red_esc_code=$'\e[37;1;41m'
    while sysread; do
        syswrite -o 2 "${stderr_red_esc_code}${REPLY}$terminfo[sgr0]"
    done
}

# Redirect stderr to color_stderr_red function.
exec 2> >(color_stderr_red)

# # Don't inherit the value of PS1 from the previous shell (Zsh from Bash).
# PS1=$'%{\e]0;%d\a%}\n%F{grn}%n@%m %F{yel}%d%f\n%# '

# Enable Git information in the command prompt.
autoload -Uz vcs_info
precmd_vcs_info() {
    vcs_info
}
precmd_functions+=( precmd_vcs_info )
setopt PROMPT_SUBST                     # Allow parameter expansion in prompt.
zstyle ':vcs_info:git:*' formats ' %F{cyan}(%b)%f'
zstyle ':vcs_info:*' enable git

# Set the command prompt with Git information.
PROMPT="
%B%(?.%F{green}.%F{red}$(tput bel)"$'\u00d7'" %? )%f%b%F{blue}%n@%m%F{black}%B:%b%F{yellow}%~%f\$vcs_info_msg_0_%B%F{green}%(!.#.>)%f%b "
                                        # ? - Exit code of the previous command.
                                        # n - User name.
                                        # m - Machine name.
                                        # . - Abbreviated pwd.
                                        # ! - su?

set_terminal_title_and_prompt() {
    local term=${TERM:-dumb}
    if [[ "$term" == "xterm"* || "$term" == "rxvt"* ]]; then
        precmd() {
            print -Pn "\e]0;%m: %~\a"
        }
        preexec() {
            local match
            match=${(q)1//(#m)[$'\000-\037\177-']/${(q)MATCH}}
            print -n "\e]0;Zsh $HOST: $match\a"
        }
    fi
}

set_terminal_title_and_prompt

BEL=$(tput bel)
PROMPT+='%(?::$BEL)'

if [[ "$TERM" = "dumb" ]]; then
    PROMPT="> "
    RPROMPT=""
fi

FILE="$HOME"/.dotfiles/plugins/mintty-colors-solarized/mintty-solarized-dark.sh && test -f "$FILE" && . "$FILE"

# XXX Check for MinTTY
if [[ -d /cygdrive/c/ ]]; then
    echo -ne '\e]4;8;#404040\a'     # bold blk
    echo -ne '\e]4;9;#FF4040\a'     # bold red
    echo -ne '\e]4;10;#40FF40\a'    # bold grn
    echo -ne '\e]4;11;#FFFF40\a'    # bold yel
    echo -ne '\e]4;12;#6060FF\a'    # bold blu
    echo -ne '\e]4;13;#FF40FF\a'    # bold mag
    echo -ne '\e]4;14;#40FFFF\a'    # bold cyn
    echo -ne '\e]4;15;#FFFFFF\a'    # bold wht
fi

if [[ -r "$HOME"/.oh-my-zsh ]]; then
    ZSH="$HOME"/.oh-my-zsh
    ZSH_CUSTOM="$ZSH/custom"

    HIST_STAMPS="yyyy-mm-dd"            # See command `history'.

    COMPLETION_WAITING_DOTS="true"
fi

# if [[ -r "$ZSH" ]]; then
#     prompt_svn() {
#         local rev branch
#         if in_svn; then
#             rev=$(svn_get_rev_nr)
#             branch=$(svn_get_branch_name)
#             if [[ $(svn_dirty_choose_pwd 1 0) -eq 1 ]]; then
#                 prompt_segment yel blk
#                 echo -n "$rev@$branch"
#                 echo -n " Â±"
#             else
#                 prompt_segment grn blk
#                 echo -n "$rev@$branch"
#             fi
#         fi
#     }
# fi

if [[ -r "$HOME"/.dotfiles/plugins/oh-my-zsh/custom/themes/zinc/zinc.zsh ]]; then
    ZSH_THEME=""
    source "${ZSH_CUSTOM:-~/.oh-my-zsh/custom}"/themes/zinc/zinc.zsh

    zinc_default_user="f.niessen"
    zinc_default_host="XIPHIAS"

    # Input your own strftime format: http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
    zincs_time() {
        REPLY="%D{%H:%M}"
    }

    prompt_zinc_setup fniessen-p9k-port

    prompt_zinc_setup rprompt-previous-line

fi

# # either user and host separate with CONNECT_PREV
# # or zincs_userhost
# zinc_left=(
#   # zincs_user
#   # zincs_host
#   zincs_userhost
#   zincs_cwd
#   zincs_vcs
# )
#
# zinc_right=(
#   zincs_retval
#   zincs_execution_time
#   my_custom_time
#   zincs_jobs
# )
#
# zinc_opts=(
#   zincs_user "white;black;CONDITIONAL;normal"
#   zincs_host "white;black;CONNECT_PREV+CONDITIONAL;normal"
#   zincs_userhost "white;black;CONDITIONAL;normal"
# )
#
# # autohide the user when it's default
# zincs_user_display_hidden() {
#   [[ "$USER" == "$zinc_default_user" ]] && true || false
# }
# zincs_host_display_hidden() {
#   [[ "$HOST" == "$zinc_default_host" ]] && true || false
# }
#
# # or show both when either changes:
# zincs_userhost_display_hidden() {
#   [[ "$HOST" == "$zinc_default_host" ]] && [[ "$USER" == "$zinc_default_user" ]] && true
# }
#
# # set the time format option:
# # http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
# my_custom_time() {
#   REPLY="%T"
# }
#
# # set the zincs_execution_time min time:
# zincs_execution_time[threshold]=10

if [[ -r "$HOME"/.dotfiles/plugins/oh-my-zsh ]]; then
    plugins=(
        colored-man-pages
        extract
        # git                           # Provide many aliases and a few useful functions.
        history
        history-substring-search
        # svn
    )
fi

if [[ -r "$HOME"/.dotfiles/plugins/oh-my-zsh ]]; then
    # Fix Colorize man pages (with `less` pager) not working in Cygwin MinTTY
    export MANROFFOPT="-c"
    # in your shell rc file. This has the same effect as
    # export GROFF_NO_SGR=1               # For konsole and gnome-terminal.
    # but only affects man. I'm not sure if groff is used for anything else
    # besides man pages, but this seems safer to prevent unintended side
    # effects.
fi

if [[ -r "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting" ]]; then
    plugins+=(zsh-syntax-highlighting)
fi

if [[ -r "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ]]; then
    plugins+=(zsh-autosuggestions)
fi

if [[ -r "$HOME"/.dotfiles/plugins/oh-my-zsh ]]; then
    . "$ZSH"/oh-my-zsh.sh
fi

# Autosuggestions.
if [[ -r "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ]]; then
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=5'
fi

# Enable menu select (some kind of graphical menu)
zstyle ':completion:*' menu select

# Extensions to completion listings:
# - ability to highlight matches in such a list,
# - ability to scroll through long lists and
# - different style of menu completion.
zmodload zsh/complist

# When entering a directory, push it to the directory stack and list its
# contents.
setopt auto_pushd
setopt pushd_ignore_dups

cd() {
    builtin cd "$@" > /dev/null
    ls --color=auto -F
}

setopt AUTO_CD                  # Change directory given just path.

# Load general completion.
autoload -Uz compinit

# Start the Zsh completion system.
compinit -i                     # Silently ignore all insecure files and directories.

setopt AUTO_LIST                # Automatically list choices on an ambiguous completion.

# setopt always_to_end            # when completing from the middle of a word, move the cursor to the end of the word
# setopt auto_menu                # show completion menu on successive tab press. needs unsetop menu_complete to work
# setopt auto_name_dirs           # any parameter that is set to the absolute name of a directory immediately becomes a name for that directory
# unsetopt auto_name_dirs         # do not set auto_name_dirs because it messes up prompts
# setopt complete_in_word         # allow completion from within a word/phrase
# setopt auto_list                # automatically list choices on ambiguous completion.
# unsetopt completealiases        # an alias of a command should complete to the command completion
# unsetopt menu_complete          # do not autoselect the first completion entry
# unsetopt flowcontrol            # do not freezes output to the terminal until you type ^q

# Small and capital letters will match small and capital letters only if there
# are no case-sensitive matches.
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'

# compdef '_files -g "*"' start

setopt EXTENDED_GLOB            # Use additional pattern matching features.
setopt NOMATCH                  # Unmatched patterns cause an error.

setopt NOTIFY                   # Immediately report changes in background job status.

# Beep when there's an error with the command text you're typing in (e.g. if you
# hit tab and there are no matching files) -- not as a result of normal commands
# returning errors.
setopt BEEP

autoload -U select-word-style
select-word-style bash

HISTFILE=~/.zsh_history         # Zsh doesn't save the history to a file by default.
HISTSIZE=10000                  # In memory.
SAVEHIST=$HISTSIZE              # To file.

setopt APPEND_HISTORY           # Append rather than overwrite history file.
setopt EXTENDED_HISTORY         # Save timestamp and runtime information.
setopt HIST_EXPIRE_DUPS_FIRST   # Allow dups, but expire old ones when I hit HISTSIZE.
setopt HIST_FIND_NO_DUPS        # Don't find duplicates in history.
setopt HIST_IGNORE_ALL_DUPS     #! Ignore duplicate commands regardless of commands in between.
setopt HIST_IGNORE_DUPS         # Ignore duplicate commands.
setopt HIST_REDUCE_BLANKS       # Leave blanks out.
setopt HIST_SAVE_NO_DUPS        # Don't save duplicates.

setopt INC_APPEND_HISTORY       # Write after each command.
setopt SHARE_HISTORY            # Share history between sessions.

# Print full time-date stamps in ISO8601 `yyyy-mm-dd hh:mm' format, and all entries.
alias history="history -i 0"
alias h="history -i 0"

# Use Emacs keybindings.
bindkey -e

# Move by whole words.
bindkey '\e[1;5C' forward-word          # <C-right>
bindkey '\e[1;5D' backward-word         # <C-left>

# Search matching commands from the history.
bindkey '\e[A' history-beginning-search-backward # <up>
bindkey '\e[B' history-beginning-search-forward  # <down>

bindkey "\e[3~" delete-char             # <delete>

# Make Zsh beep like Bash when backspacing on empty line.
backward-delete-char-beep() {
    if (( CURSOR == 0 )); then
        zle beep
    fi
    zle backward-delete-char
}
zle -N backward-delete-char-beep
bindkey "^?" backward-delete-char-beep  # <backspace>

# Display possible completions for the current word.
bindkey '\e=' list-choices

# Replace string.
autoload -U replace-string
zle -N replace-string
bindkey "\e%" replace-string

# Edit command line.
autoload edit-command-line
zle -N edit-command-line
bindkey "\ee"      edit-command-line
bindkey "\ev"      edit-command-line
bindkey "\C-x\C-e" edit-command-line

# Append " | less" to command
append_less() {
    zle end-of-line
    zle -U " | less"
}
zle -N append-less append_less
bindkey '\ep' append-less               # M-p.

# From https://github.com/romkatv/zsh4humans
# Widgets for changing current working directory.
z4h-redraw-prompt() {
    emulate -L zsh
    local f
    for f in chpwd $chpwd_functions precmd $precmd_functions; do
        (( $+functions[$f] )) && $f &>/dev/null
    done
    zle .reset-prompt
    zle -R
}
