#+TITLE:     Shell utilities
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en

#+PROPERTY:  header-args :eval no
#+SETUPFILE: theme-bigblow-pirilampo.setup

#+name: current-time
#+begin_src emacs-lisp :eval yes :results value silent :tangle no
(format-time-string "%Y%m%d.%H%M")
#+end_src

* Context

** Description

The shell utilities are core shell functions and scripts which I wrote when
doing my day-to-day tasks.  Over time, this will become a *powerful toolkit*.

#+begin_note
Library of Babel needs the ~#+name~ field to "ingest" a code block -- for Org mode
users.
#+end_note

** See also

For similar collections, see:

- http://icodesnippet.com/
- http://exploitsdownload.com/
- http://code.google.com/
- [[https://bbs.archlinux.org/viewtopic.php?id=56646&p=1][Post your handy self made command line utilities]]

** Coding style

- http://wiki.bash-hackers.org/scripting/style

- https://google-styleguide.googlecode.com/svn/trunk/shell.xml

  ~variable_name~ (preferred, ~variableName~ accepted) \\
  ~function_name~ \\
  ~CONSTANT_NAME~

** Shell formatter + checker

- https://github.com/mvdan/sh
- https://google.github.io/styleguide/shell.xml
- https://www.shellcheck.net/ (online checker!)

http://www.skybert.net/emacs/bash-linting-in-emacs/

** Prerequisites

- Clear
- Diff
- Iconv

* Core utilities

** Reverse the order of lines in a file

tac (the, ahem, reverse of cat). Part of coreutils.

Flipping one file into another

#+begin_src shell
tac a.txt > b.txt
#+end_src

** Difference between two directories

#+begin_src shell
colordiff -urb dir1 dir2
colordiff -qr dir1 dir2 | sort
#+end_src

Options explained:
- -q :: Output only whether files differ!
- -u :: Output NUM (default 3) lines of unified context.
- -r :: Recursively compare any subdirectories found.
- -b :: Ignore white space changes.

* Shell aliases

** Remove duplicate lines without sorting

How to *delete duplicate lines* in a file *without sorting* it?

: awk '!seen[$0]++' file.txt

https://stackoverflow.com/questions/1444406/how-to-delete-duplicate-lines-in-a-file-without-sorting-it-in-unix

** Find all of the distinct file extensions in a folder hierarchy

Find executable file extensions:

: find . -executable -type f | awk -F'.' '{print $NF;}'

Recursive version:

#+begin_src shell
alias file_ext=$'find . -type f -name "*.*" | awk -F. \'!a[$NF]++{print $NF}\''
#+end_src

Recursive version:

#+begin_src shell
find . -type f | sed -e 's/.*\.//' | sed -e 's/.*\///' | sort -u
#+end_src

If you want totals (how may times the extension was seen):

#+begin_src shell
find . -type f | sed -e 's/.*\.//' | sed -e 's/.*\///' | sort | uniq -c | sort -rn
#+end_src

Non-recursive (single folder):

#+begin_src shell
for f in *.*; do printf "%s\n" "${f##*.}"; done | sort -u
#+end_src

* Shell functions
:PROPERTIES:
:header-args+: :tangle ~/.dotfiles/bin/shellutils :shebang #!/usr/bin/env bash
:END:

Only use alphanumeric characters and the underscore for function names.

** Exit with an error

The exit status follows the conventions for programs such as ~grep~, ~cmp~, and
~diff~: it is 2 (or greater) if an error occurred.

#+begin_src shell
die() {
    printf "$(basename $0): $@\n" > /dev/stderr
    exit 2                              # An error occurred.
}
#+end_src

~Die~ *must be a function* so that the calling script does exit with an error.

** Check for executable files

#+begin_src shell
files_executables_p() {
    for x in $@; do
        command -v $x > /dev/null || die "$x not found."
    done
}
#+end_src

** Check for Cygwin executable files

We sometimes have to check that the ~PATH~ is set right, so that Cygwin
executables (for example, ~whoami~ and ~hostname~) are found before their Windows
counterpart -- to avoid problems of spurious ~\r~ added to the output.

#+begin_src shell
files_cygwin_executables_p() {
    for x in $@; do
        [ "$(command -v $x)" = "/usr/bin/$x" ] \
            || die "$x is not a Cygwin executable."
    done
}
#+end_src

** Find the name of the parent process

The following is supposed to work on Linux, but doesn't on Cygwin.

#+begin_src shell
pname() {
    ps -o command= -p $PPID | tail -n 1 | awk '{print $1}' | awk -F/ '{print $NF}'
}
#+end_src

** Find files

#+begin_src shell :tangle ~/.dotfiles/bin/fd
find . -type d -iname "*$1*" | sed "s#^\./##"
#+end_src

#+begin_src shell :tangle ~/.dotfiles/bin/ff
find . -type f -iname "*$1*" | sed "s#^\./##"
#+end_src

** Find recent files

#+begin_src shell
# List all files modified TODAY only (since start of day only, i.e. 00:00).
alias today='find . -daystart -mtime 0 -type f -printf "  %CY-%Cm-%Cd %Ca %CH:%CM - %p\n" | sed "s#\./##"'

# List all files modified YESTERDAY.
alias yesterday='find . -daystart -mtime 1 -type f -printf "  %CY-%Cm-%Cd %Ca %CH:%CM - %p\n" | sed "s#\./##"'

# List all files modified THIS WEEK.
alias thisweek1='find . -mtime -7 -type f -printf "  %CY-%Cm-%Cd %Ca %CH:%CM - %p\n" | sed "s#\./##"'
alias thisweek2='find . -mtime 7 -type f -printf "  %CY-%Cm-%Cd %Ca %CH:%CM - %p\n" | sed "s#\./##"'
alias thisweek3='find . -daystart -mtime 7 -type f -printf "  %CY-%Cm-%Cd %Ca %CH:%CM - %p\n" | sed "s#\./##"'
#+end_src

XXX Check out %C, %T and %A!!!

See https://unix.stackexchange.com/questions/26313/colored-find-output for
*colored find output*.

** Find recent files
:PROPERTIES:
:header-args+: :shebang #!/usr/bin/env bash
:END:

It recursively finds all files containing the pattern of the first argument
passed to the command (~fr <pattern>~) and sorts them with the most recent one
last.

Options (to ~es~, Everything):
-r Search the database using a basic POSIX regular expression.
-i Does a case sensitive search.
-w Does a whole word search.
-p Does a full path search.
-h --help Display this help.
-n <num> Limit the amount of results shown to <num>.
-s Sort by full path.

#+begin_src shell :tangle ~/.dotfiles/bin/dc
# Date Created.
find . -iname "*"$@"*" -printf "%A@ %AY-%Am-%Ad %Aa %AH:%AM - %p\n" \
    | sort -n \
    | cut -d " " -f 2- \
    | sed "s#\./##" \
    | grep -i "$@";
#+end_src

#+begin_src shell :tangle ~/.dotfiles/bin/dm
# Date Modified.
# find . -mmin 1440 -iname "*"$@"*" -printf "%T@ %TY-%Tm-%Td %Ta %TH:%TM - %p\n" \
find . -iname "*"$@"*" -printf "%T@ %TY-%Tm-%Td %Ta %TH:%TM - %p\n" \
    | sort -n \
    | cut -d " " -f 2- \
    | sed "s#\./##" \
    | grep -i "$@";
#+end_src

~dm~ will show files and folders that have been altered in content today (their
"date modified" field has been changed).

XXX Includes copies?

#+begin_src shell :tangle ~/.dotfiles/bin/rc
# Recent Change.
find . -iname "*"$@"*" -printf "%C@ %CY-%Cm-%Cd %Ca %CH:%CM - %p\n" \
    | sort -n \
    | cut -d " " -f 2- \
    | sed "s#\./##" \
    | grep -i "$@";
#+end_src

~rc~ includes moves and renames that do not change the "date modified" field or
the contents of the files or folders.

XXX See
https://superuser.com/questions/294161/unix-linux-find-and-sort-by-date-modified
for improvements (using ~ssed~ and ~cut~ with complement option).

* Shell scripts
:PROPERTIES:
:header-args+: :shebang #!/usr/bin/env bash
:END:

** Send an email
:PROPERTIES:
:header-args+: :tangle ~/.dotfiles/bin/mail :shebang #!/usr/bin/env bash
:END:

Send a mail to one or more people.

*** Name

#+begin_src shell :noweb yes :padline no
# mail -- Send simple mail
#+end_src

*** Synopsis

#+begin_src shell
Usage()
{
    cat << EOF 1>&2
Usage: $CMD [-s SUBJECT] [-a ATTACHMENT]... [-c CC-ADDR] [-b BCC-ADDR] [-f FROM-ADDR] TO-ADDR
Try '$CMD -h' for more information.
EOF
    exit 2
}
#+end_src

*** Description

Send an email using ~mail~:

#+begin_src shell :tangle no
mail -s "Subject" recipient@example.com < /path/to/file
cat /path/to/file | mail -s "Subject" recipient@example.com
echo "Message" | mail -s "Subject" recipient@example.com
#+end_src

*** Options

The following options shall be supported:

#+begin_src shell :noweb yes
Help()
{
    cat << EOF
This is $CMD, version: <<current-time()>>.

Usage: $CMD [-s SUBJECT] [-a ATTACHMENT]... [-c CC-ADDR] [-b BCC-ADDR] [-f FROM-ADDR] TO-ADDR
Send simple mail.
Examples:
    $CMD -s 'Disk failure' bill@example.com < /tmp/message
    print "This is the body." | $CMD -s 'Other subject' bill@example.com

Options:
  -s  Specify subject on command line
  -a  Attach a file
  -c  Send carbon copies to (comma separated) list of recipients
  -b  Send blind carbon copies to (comma separated) list of recipients
  -f  Set the From address
  -h  Display this help and exit
EOF
    exit 0
}
#+end_src

*** Stdin

When ~mail~ is invoked, standard input shall be the message to be delivered to
the specified addresses.

*** Input files

None.

*** Environment variables

The behavior of ~mail~ is affected by the following environment variable:

- ~SMTP~ ::
     The SMTP connection is made to the server specified by the variable ~SMTP~.

*** Stdout

The standard output shall be that of the ~blat~ command.

*** Stderr

The standard error shall be used only for diagnostic messages.

*** Output files

None.

*** Exit status

The ~mail~ utility returns one of the following values upon exit:

- 0 ::
     Successful completion: one mail was sent.

- 2 ::
     Invalid options were specified on the command line or shell input was
     missing.

Otherwise, the exit status of ~mail~ shall be that of the ~blat~ command.

*** Examples

Here's a shell script that reports the disk usage:

#+begin_src shell :tangle no
( printf "Disk usage:\n" ; du -sh ) | mail -s "Disk usage report" recipient@example.com
#+end_src

Here's another one to backup a configuration folder, archive it, and send it as
an attachment:

#+begin_src shell :tangle no
tar -zcf ~/backup.tar.gz ~/files_to_backup
printf "Archived configuration files\n" | mail -s "Backup data" -a ~/backup.tar.gz recipient@example.com
#+end_src

*** Code

#+begin_src shell
# command name
CMD=$(basename "$0")

. shellutils || exit 2

if [ $# -eq 0 ]; then
    Usage
fi

# check for Cygwin executable files (and not their Windows counterpart)
files_cygwin_executables_p "whoami" "hostname"

# default values
SUBJECT="none"
ATTFILES=""                             # files to be attached
CC=""
BCC=""
FROM="<$(whoami)@$(echo "$(hostname)".com | tr '[:upper:]' '[:lower:]')>"
: "${SMTP:=smtp}"                     # set var if not already set

while getopts "s:c:b:f:a:h" opt
do
    case "$opt" in
        s) SUBJECT="$OPTARG";;
        a) ATTFILES="$ATTFILES $OPTARG";;
        c) CC="$OPTARG";;
        b) BCC="$OPTARG";;
        f) FROM="$OPTARG";;
        h) Help;;
        ,*) Usage;;
    esac
done
shift $((OPTIND - 1))

MAILTO="$1"
if [ "$MAILTO" = "" ]; then
    Usage
fi

# check presence of stdin contents
[ -t 0 ] && die "Message body is missing."

# check for executable files
files_executables_p "blat"

ATT_SWITCH=""
for attach in $ATTFILES
do
    if [ ! -r "$attach" ]
    then
        die "File $attach does not exist or is not readable."
    else
        # binary vs text file
        if [ "$(file --brief --mime "$attach" 2> /dev/null | cut -d/ -f 1)" = "text" ]
        then
            ATT_SWITCH="$ATT_SWITCH -attacht $(cygpath -w "$attach")"
        else
            ATT_SWITCH="$ATT_SWITCH -attach $(cygpath -w "$attach")"
        fi
    fi
done

CC_SWITCH=""
[ "$CC" = "" ] || CC_SWITCH="-cc ${CC}"

BCC_SWITCH=""
[ "$BCC" = "" ] || BCC_SWITCH="-bcc ${BCC}"

blat -to "$MAILTO" \
     "$CC_SWITCH" \
     "$BCC_SWITCH" \
     -subject "$SUBJECT" \
     -f "$FROM" \
     -server "$SMTP" \
     "$ATT_SWITCH"

# mail ends here
#+end_src

** Echo text in color

#+begin_src shell :tangle ~/.dotfiles/bin/cecho
cecho() {
    black="\e[30m"
    red="\e[31m"
    green="\e[32m"
    yellow="\e[33m"
    blue="\e[34m"
    magenta="\e[35m"
    cyan="\e[36m"
    white="\e[37m"

    BLACK="\e[1;30m"
    RED="\e[1;31m"
    GREEN="\e[1;32m"
    YELLOW="\e[1;33m"
    BLUE="\e[1;34m"
    MAGENTA="\e[1;35m"
    CYAN="\e[1;36m"
    WHITE="\e[1;37m"

    reset="\e[0m"

    color=${YELLOW}
    printf "$color$1$reset\n"
}

cecho "$@"
#+end_src

** Find duplicates

*** finddup -- Find DUPlicate files

Use ~fdupes~ (from Cygwin).

#+begin_src shell :tangle ~/.dotfiles/bin/finddup
fdupes -r . \
    | grep -v "/.svn/" \
    | grep -v "/.git/" \
    | grep -v "/.gitkeep" \
    | grep -v "/.emacs.d/backups" \
    | uniq
    | awk 'BEGIN {RS="\n\n"; ORS="\n\n"; FS="\n"} {if (NF>1) print}'
#+end_src

#+begin_note
~uniq~ deletes duplicate, consecutive lines.

The AWK script finds every block with more than one line.
#+end_note

*** dupe -- Search for duplicated filenames

find (files) with duplicate or conflicting names.
Usage: findsn [-A -c -C] [[-r] [-f] paths(s) ...]

#+begin_src shell :tangle no
find . -type f | sort | uniq -c | grep -v "^[ \t]*1 "
#+end_src

#+begin_src shell :tangle no
#!/usr/bin/env bash

find -type f > names.lst

> names.out

TAB=`echo -ne "\t"`
while read name; do
    bn="$( basename "$name" )"
    name2="$( grep "$bn" names.lst | grep -v "$name" )"
    if [ "$name2" != "" ]; then
        if !(grep -q "^${name}${TAB}" names.out); then
            size=`stat --format=%s "$name"`
            size2=`stat --format=%s "$name2"`
            echo -e "$name${TAB}$size" >> names.out
            echo -e "$name2${TAB}$size" >> names.out
        fi
    fi
done < names.lst

cat names.out
rm -f names.lst
#+end_src

#+begin_src shell :tangle ~/.dotfiles/bin/dupe
# Find Duplicate File Names - By Dev (dk_mahadeva@yahoo.com)
# If no command-line parameter (path to begin from) is specified, then the
# default is to begin from the current (.) directory.
cd path=$1
: ${path:=.}
printf "Building file list...\n" > /dev/stderr
fullList=$(find `pwd` $path | grep -v '^\.' | awk -F '/' '{print $NF,$0}' | sort +0 -1)
fileNames=$(find `pwd` $path | grep -v '^\.' | awk -F '/' '{print $NF}' | sort | uniq -d)
for EACH in $fileNames; do
    echo "$fullList" | grep -wE "^$EACH "
    echo ""
done
exit 0
#+end_src

*** grep2 -- Find all AXVW files with two strings (Show AXVW files with both matches only)

(See Utilities.)

** Utils

#+begin_src shell :tangle ~/.dotfiles/bin/strip-dashes
# Strip lines with dashes.
sed "s/NULL//g"
#+end_src

#+begin_src shell :tangle ~/.dotfiles/bin/delete-2nd-line
# Delete the second line.
sed -e '2d'
#+end_src

#+begin_src shell :tangle ~/.dotfiles/bin/replace-null
# Replace NULL value by empty string.
sed "s/NULL//g"
#+end_src

* Findup
:PROPERTIES:
:header-args+: :tangle ~/.dotfiles/bin/findup :shebang #!/usr/bin/env bash
:END:

Search for the specified file(s) in the directory tree upwards, up to ~/~.

Usage:
: findup -name 'x*'

#+begin_src shell
set -e
while [[ $PWD != / ]]; do
    find "$PWD"/ -maxdepth 1 -mindepth 1 "$@"
    cd ..
done
#+end_src

* Compare two files and print unmatched lines / Deleting lines from one file which are in another file

Remove the lines from file which appear in another file.

** Comm

Compare two *sorted* files line by line.

- ~-1~ removes all lines unique to ~file1~,
- ~-2~ removes all lines that are only in ~file2~ and
- ~-3~ removes all lines that are *common* in both files.

The ~comm~ (with ~sort~) method take a long time on large files.

#+begin_src shell
# Print lines in file1 not in file2, and vice versa.
comm -3 <(sort file1) <(sort file2)
#+end_src

#+begin_src shell
# Print unmatched lines.
$ comm -13 <(sort file1) <(sort file2)
# Suppress the lines that are in both files, or only in file1.
#+end_src

*Remove the lines from file ~from-this.txt~ *which appear in file ~exclude-these.txt~.*
No cleanup needed!

#+begin_src shell
# Clear redundant contents in from-this.txt.
comm -23 from-this.txt exclude-these.txt | sponge from-this.txt
#+end_src

** AWK

Alternatively, an AWK solution to remove common lines between 2 files without
sorting -- *much faster* than ~sort~, and keeps the original order of the
=from-this.txt= file:

#+begin_src shell
awk 'NR == FNR { a[$0]++; next } { if (! a[$0]) print }' exclude-these.txt from-this.txt
#+end_src

#+begin_note
In Awk, ~FNR~ refers to the record number (typically the line number) in the
current file and ~NR~ refers to the total record number.  This means that the
condition ~NR==FNR~ is only true for the first file, as ~FNR~ resets back to 1 for
the first line of each file but ~NR~ keeps on increasing.

This pattern is typically used to perform actions on only the first file.  The
next inside the block means any further commands are skipped, so they are only
run on files other than the first.
#+end_note

If you're doing this with huge files, then the *memory constraints* of loading
a huge file into an associative array are going to be prohibitive.

** Diff

The downside of the above solutions is that it doesn't take line order into
account and, if your input has duplicate lines in different places, you might
not get what you expect.

The solution to that is to use a real comparison tool such as ~diff~.  You could
do this by creating a diff file with the context value at 100% of the lines in
the file, then parsing it for just the lines that would be removed if converting
file =from-this.txt= to file =exclude-these.txt=.  /(This command also removes the
diff formatting after it gets the right lines.)/

#+begin_src shell
colordiff -U $(wc -l < from-this.txt) from-this.txt exclude-these.txt | sed -n 's/^-//p'
#+end_src

Example:

#+begin_src shell
awk 'NR == FNR { a[$0]++; next } { if (! a[$0]) print }' dupes-standard.txt dupes-custo.txt
colordiff -U $(wc -l < dupes-custo.txt) dupes-custo.txt dupes-standard.txt | sed -n 's/^-//p'
#+end_src

* Recursively run chmod -x?

** Convert the files with 755 permissions to 644

#+begin_src sh :tangle no
find . -type f -perm 755 -exec chmod 644 {} \;
#+end_src

#+begin_note
You could use ~+~ instead of ~\;~ to reduce the number of subprocesses created.
#+end_note

** Pictures, etc.

: find . -executable -type f | awk -F'.' '{print $NF;}' | sort | uniq -c

There is no (good) reason ever for pictures to be executable.

Just run ~unexe-all~ to fix them.

See also https://www.lifewire.com/list-of-executable-file-extensions-2626061

#+begin_src sh :tangle ~/.dotfiles/bin/unexe-all :shebang #!/usr/bin/env sh
echo "Remove exe perm"
find . -type f \
    \( -name "*.DTD" \
    -o -name "*.DWG" \
    -o -name "*.MF" \
    -o -name "*.PDF" \
    -o -name "*.R" \
    -o -name "*.SQL" \
    -o -name "*.TTF" \
    -o -name "*.Txt" \
    -o -name "*.XE" \
    -o -name "*.actionScriptProperties" \
    -o -name "*.acts" \
    -o -name "*.appcache" \
    -o -name "*.asa" \
    -o -name "*.asp" \
    -o -name "*.awk" \
    -o -name "*.axvw" \
    -o -name "*.bak" \
    -o -name "*.bat" \
    -o -name "*.bmp" \
    -o -name "*.c" \
    -o -name "*.ced" \
    -o -name "*.cfg" \
    -o -name "*.checkstyle" \
    -o -name "*.class" \
    -o -name "*.classpath" \
    -o -name "*.css" \
    -o -name "*.csv" \
    -o -name "*.dflt" \
    -o -name "*.doc" \
    -o -name "*.docx" \
    -o -name "*.dtd" \
    -o -name "*.duw" \
    -o -name "*.dwg" \
    -o -name "*.el" \
    -o -name "*.emf" \
    -o -name "*.eot" \
    -o -name "*.fbprefs" \
    -o -name "*.flexProperties" \
    -o -name "*.frms" \
    -o -name "*.gemspec" \
    -o -name "*.gif" \
    -o -name "*.gitignore" \
    -o -name "*.htm" \
    -o -name "*.html" \
    -o -name "*.ico" \
    -o -name "*.idx" \
    -o -name "*.iml" \
    -o -name "*.ini" \
    -o -name "*.jar" \
    -o -name "*.java" \
    -o -name "*.jpeg" \
    -o -name "*.jpg" \
    -o -name "*.js" \
    -o -name "*.jsb" \
    -o -name "*.jshintignore" \
    -o -name "*.jshintrc" \
    -o -name "*.json" \
    -o -name "*.jsp" \
    -o -name "*.lang" \
    -o -name "*.launch" \
    -o -name "*.ldif" \
    -o -name "*.less" \
    -o -name "*.lex" \
    -o -name "*.lic" \
    -o -name "*.log" \
    -o -name "*.m" \
    -o -name "*.m4" \
    -o -name "*.md" \
    -o -name "*.md5" \
    -o -name "*.model" \
    -o -name "*.mp4" \
    -o -name "*.mpp" \
    -o -name "*.mxml" \
    -o -name "*.name" \
    -o -name "*.number" \
    -o -name "*.org" \
    -o -name "*.orig" \
    -o -name "*.otf" \
    -o -name "*.pack" \
    -o -name "*.pcx" \
    -o -name "*.pdf" \
    -o -name "*.php" \
    -o -name "*.pid" \
    -o -name "*.pmd" \
    -o -name "*.png" \
    -o -name "*.pptx" \
    -o -name "*.prefs" \
    -o -name "*.project" \
    -o -name "*.properties" \
    -o -name "*.psd" \
    -o -name "*.pspimage" \
    -o -name "*.py" \
    -o -name "*.rb" \
    -o -name "*.rpt" \
    -o -name "*.sample" \
    -o -name "*.scss" \
    -o -name "*.scssc" \
    -o -name "*.scssx" \
    -o -name "*.sed" \
    -o -name "*.springBeans" \
    -o -name "*.sql" \
    -o -name "*.stackdump" \
    -o -name "*.svg" \
    -o -name "*.swc" \
    -o -name "*.swf" \
    -o -name "*.tex" \
    -o -name "*.tgrp" \
    -o -name "*.tif" \
    -o -name "*.tld" \
    -o -name "*.tsv" \
    -o -name "*.ttf" \
    -o -name "*.txt" \
    -o -name "*.vm" \
    -o -name "*.war" \
    -o -name "*.woff" \
    -o -name "*.wsdl" \
    -o -name "*.xhtml" \
    -o -name "*.xls" \
    -o -name "*.xls" \
    -o -name "*.xlsx" \
    -o -name "*.xml" \
    -o -name "*.xsd" \
    -o -name "*.xsl" \
    -o -name "*.xslt" \
    -o -name "*.xslx" \
    -o -name "*.zip" \
    -o -name "*.zlib" \
    -o -name "ChangeLog" \
    -o -name "Makefile" \
    -o -name "README" \
    \) \
    -exec chmod -x {} +
#+end_src

Bonus:

#+begin_src sh :tangle no
find /space/music -type d -exec chmod o-w {} +
find /space/music -type d -exec chmod 755 {} +
#+end_src

Explanation:

Most of the command line is self-explanatory. The only part that need some
insight is the ending. ~{}~ is replaced by the name of the files (resp directory)
found that match the filter. Usually, the find command is ended with a protected
semicolon ~\;~.

However, this isn't efficient as the command is run once for each
file/directory.

There is a well known workaround that pipes ~find~ output to ~xargs~ which
concatenates the file names up to the maximum command line allowed but then
there is an issue when the path contains spaces, which is more and more common
even in the Unix/Linux world.

Again a workaround based on GNU specific extensions allows to properly handle
these case. I choose a simpler approach using a POSIX (read portable) way to
have find building itself the long command lines, i.e. ~{}~ is replaced by a suite
of file names up to the maximum number allowed.

* VC
:PROPERTIES:
:header-args+: :shebang #!/usr/bin/env bash
:END:

** Ignore files from the command line

Add a file (or a file glob pattern) to ignore without deleting the previous
value of the ~svn:ignore~ property... from the command line.

#+begin_src shell :tangle ~/.dotfiles/bin/svnignore
# Usage: svnignore admin/notes/\*.tex

target="$1"
targetdirectory=$(dirname $target)
targetfilepattern=$(basename $target)

svnignores=$(svn propget svn:ignore "$targetdirectory")
svnignores="$svnignores"$'\n'"$targetfilepattern"
printf "Ignore '$targetfilepattern'\n"
svn propset svn:ignore "$svnignores" "$targetdirectory"
#+end_src

* Web security assessments

** HTTP

From Hacking Exposed Web Applications:

#+begin_src shell :tangle ~/.dotfiles/bin/getit.sh
#!/usr/bin/env sh
# mike's getit.sh script
if [ -z $1 ]; then
    echo -e "\n\tUsage: $0 <host> <URL>"
    exit
fi
echo -e "GET $2 HTTP/1.0\n\n" | \
nc -vv $1 80
#+end_src

#+begin_src shell
getit.sh www.missioncriticalit.com /index.html
#+end_src

#+begin_src shell
getit.sh www.victim.com /index.html | grep -i "<form"
#+end_src

#+begin_src shell
getit.sh www.victim.com /index.html | grep -i "input type"
#+end_src

** HTTPS

#+begin_src shell :tangle ~/.dotfiles/bin/sgetit.sh
#!/usr/bin/env sh
# mike's sgetit.sh script
if [ -z $1 ]; then
    echo -e "\n\tUsage: $0 <SSL host> <URL>"
    exit
fi
echo -e "GET $2 HTTP/1.0\n\n" | \
openssl s_client -quiet -connect $1:443 2>/dev/null
#+end_src

#+begin_src shell
sgetit.sh www.victim.com /secure/admin.html
#+end_src

* Netcat

Here is a script which will port scan and banner grab automatically with
netcat. It will check for the SSH and MySQL version by connecting and saving
the results and it will see if the HTTP server is vulnerable to the =TRACE=
method, look in the dumpfile ~/tmp/bannergrab~ and look for
=<script>alert(123)</script>= if you can find that back you got yourself a
vulnerable server.

#+begin_src shell :tangle ~/.dotfiles/bin/nc_bgrab
#!/usr/bin/env sh

range="10.10.10.";

# You can change this to a port range $(seq 20 25) is port 20-25
ports="20 21 22 23 25 53 80 110 111 443 3306 6000";

http_header="HEAD / HTTP/0.1\n\n";

for host in $(seq 2 254); do
    for port in $ports; do
        echo "[+] Testing "$range$host":"$port;
        result=$(nc -zv -w 1 $range$host $port 2>&1 | grep succeeded);
        if [ -n "$result" ]; then
            echo "\n"$range$host":"$port"\n" >> "/tmp/bannergrab"
            if [ "$port" -eq "22" ]; then
                echo "Found open port "$range$host":"$port" Here might be some SSH server, it echoes the SSH version to you on connecting when lucky.";
                nc -v -w 1 $range$host $port >> "/tmp/bannergrab";
            fi;
            if [ "$port" -eq "80" ]; then
                echo "Found open port "$range$host":"$port" Trying to fingerprint with HEAD and see if the server is vulnerable to TRACE XSSing";
                echo $http_header | nc -v -w 1 $range$host $port >> "/tmp/bannergrab"
                echo "TRACE / HTTP/1.1\nHost: $range$host\nuser-agent: <script>alert(123)</script>\n\n" | nc -v -w 2 $range$host $port >> "/tmp/bannergrab"
            fi;
            if [ "$port" -eq "3306" ]; then
                echo "Found open port "$range$host":"$port" Possible MySQL installation found, saving the banner for later inspection, the MySQL version can be found in this.";
                nc -v -w 1 $range$host $port >> "/tmp/bannergrab";
            fi;
        fi;
    done
done
#+end_src

A lot more on http://h.ackack.net/cheatsheets/netcat/: how to workaround ~-e
cmd.exe~ option which disappeared, etc.

** Scan only certain ports

#+begin_src shell
nc -z -w 1 -v -v 10.10.10.11 20-30,53,80,100-112,443,6000-6050
#+end_src

** DNS

#+begin_src shell
nc -p 53 -w 2 -v -v firewall.yournetwork.com 53
nc -u -p 53 -w 2 -v -v firewall.yournetwork.com 53
#+end_src

** Spoof source IP address

~-s~ option to Netcat: does not work under Cygwin...

** Socat

Learning socat in terms of netcat: http://jdimpson.livejournal.com/6534.html

- *Remote access server*

  #+begin_src shell
  socat TCP-LISTEN:2323,reuseaddr EXEC:/bin/bash
  #+end_src

- *Data forwarder* (aka simple proxy)

  #+begin_src shell
  socat TCP-L:2323 TCP:localhost:22
  #+end_src

  And of course, you can replace either address with any other socat address
  we've already talked about (UDP, UDP-L), or ones we'll talk about in another
  post (e.g. SSL).

** Packet forger

SendIP

** Lauching attacks via Tor

http://www.oreillynet.com/onlamp/blog/2005/07/launching_attacks_via_tor.html
